/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "optInToApplication()void": {
      "call_config": {
        "opt_in": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "bootstrap(pay,asset,asset,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addRewards(axfer,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addStake(axfer)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeStake(asset,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimRewards(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "userStake": {
          "type": "uint64",
          "key": "us"
        },
        "userPendingRewards": {
          "type": "uint64",
          "key": "up"
        },
        "userLastUpdated": {
          "type": "uint64",
          "key": "ul"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "stakeAsset": {
          "type": "uint64",
          "key": "sa"
        },
        "rewardAsset": {
          "type": "uint64",
          "key": "ra"
        },
        "rewardRate": {
          "type": "uint64",
          "key": "rr"
        },
        "totalRewards": {
          "type": "uint64",
          "key": "tr"
        },
        "totalStaked": {
          "type": "uint64",
          "key": "ts"
        },
        "startTimestamp": {
          "type": "uint64",
          "key": "st"
        },
        "finishTimestamp": {
          "type": "uint64",
          "key": "fi"
        },
        "lastUpdated": {
          "type": "uint64",
          "key": "lu"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 8
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 3
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "AssetStaker",
    "desc": "",
    "methods": [
      {
        "name": "optInToApplication",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "bootstrap",
        "args": [
          {
            "name": "seed",
            "type": "pay",
            "desc": "The`pay`txn to fund the app (0.2 min)"
          },
          {
            "name": "stakeAsset",
            "type": "asset",
            "desc": "The asset to be staked"
          },
          {
            "name": "rewardAsset",
            "type": "asset",
            "desc": "The asset to pay rewards"
          },
          {
            "name": "start",
            "type": "uint64",
            "desc": "The start time in UNIX time"
          },
          {
            "name": "finish",
            "type": "uint64",
            "desc": "The end time in UNIX time"
          }
        ],
        "desc": "Allows creator to initialize the app",
        "returns": {
          "type": "void",
          "desc": "void"
        }
      },
      {
        "name": "addRewards",
        "args": [
          {
            "name": "axfer",
            "type": "axfer",
            "desc": "The`axfer`funding the app with rewardAsset"
          },
          {
            "name": "rewardRate",
            "type": "uint64",
            "desc": "the uint64 value of how many rewards per second"
          }
        ],
        "desc": "Allows contract to be funded with more rewards",
        "returns": {
          "type": "uint64",
          "desc": "uint64 - the total rewards (in rewardToken) remaining in the app"
        }
      },
      {
        "name": "addStake",
        "args": [
          {
            "name": "axfer",
            "type": "axfer",
            "desc": "The`axfer`funding the app with stakingAsset"
          }
        ],
        "desc": "Allows users to stake tokens",
        "returns": {
          "type": "uint64",
          "desc": "uint64 - the total number of tokens user has staked"
        }
      },
      {
        "name": "removeStake",
        "args": [
          {
            "name": "asset",
            "type": "asset",
            "desc": "The stakeTokenAsset (needs implicitly declared?)"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "how many tokens to remove"
          }
        ],
        "desc": "Allows users to remove staked tokens",
        "returns": {
          "type": "uint64",
          "desc": "uint64 - the total number of tokens user has staked (may be zero if all are removed)"
        }
      },
      {
        "name": "claimRewards",
        "args": [
          {
            "name": "asset",
            "type": "asset",
            "desc": "The stakeTokenAsset (needs implicitly declared?)"
          }
        ],
        "desc": "Allows users to remove rewards that have accrued",
        "returns": {
          "type": "void",
          "desc": "number of rewards currently pending for user"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the AssetStaker smart contract.
 */
export type AssetStaker = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'bootstrap(pay,asset,asset,uint64,uint64)void' | 'bootstrap', {
      argsObj: {
        /**
         * The`pay`txn to fund the app (0.2 min)
         */
        seed: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The asset to be staked
         */
        stakeAsset: number | bigint
        /**
         * The asset to pay rewards
         */
        rewardAsset: number | bigint
        /**
         * The start time in UNIX time
         */
        start: bigint | number
        /**
         * The end time in UNIX time
         */
        finish: bigint | number
      }
      argsTuple: [seed: TransactionToSign | Transaction | Promise<SendTransactionResult>, stakeAsset: number | bigint, rewardAsset: number | bigint, start: bigint | number, finish: bigint | number]
      /**
       * void
       */
      returns: void
    }>
    & Record<'addRewards(axfer,uint64)uint64' | 'addRewards', {
      argsObj: {
        /**
         * The`axfer`funding the app with rewardAsset
         */
        axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * the uint64 value of how many rewards per second
         */
        rewardRate: bigint | number
      }
      argsTuple: [axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>, rewardRate: bigint | number]
      /**
       * uint64 - the total rewards (in rewardToken) remaining in the app
       */
      returns: bigint
    }>
    & Record<'addStake(axfer)uint64' | 'addStake', {
      argsObj: {
        /**
         * The`axfer`funding the app with stakingAsset
         */
        axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      /**
       * uint64 - the total number of tokens user has staked
       */
      returns: bigint
    }>
    & Record<'removeStake(asset,uint64)uint64' | 'removeStake', {
      argsObj: {
        /**
         * The stakeTokenAsset (needs implicitly declared?)
         */
        asset: number | bigint
        /**
         * how many tokens to remove
         */
        amount: bigint | number
      }
      argsTuple: [asset: number | bigint, amount: bigint | number]
      /**
       * uint64 - the total number of tokens user has staked (may be zero if all are removed)
       */
      returns: bigint
    }>
    & Record<'claimRewards(asset)void' | 'claimRewards', {
      argsObj: {
        /**
         * The stakeTokenAsset (needs implicitly declared?)
         */
        asset: number | bigint
      }
      argsTuple: [asset: number | bigint]
      /**
       * number of rewards currently pending for user
       */
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'sa'?: IntegerState
      'ra'?: IntegerState
      'rr'?: IntegerState
      'tr'?: IntegerState
      'ts'?: IntegerState
      'st'?: IntegerState
      'fi'?: IntegerState
      'lu'?: IntegerState
    }
    local: {
      'us'?: IntegerState
      'up'?: IntegerState
      'ul'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AssetStakerSig = keyof AssetStaker['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AssetStakerSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the AssetStaker smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AssetStakerSig> = AssetStaker['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AssetStaker smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AssetStakerSig> = AssetStaker['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AssetStakerCreateCalls = (typeof AssetStakerCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AssetStakerCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type AssetStakerDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AssetStakerCreateCalls) => AssetStakerCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AssetStakerCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AssetStaker smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the AssetStaker smart contract using the optInToApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'optInToApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(pay,asset,asset,uint64,uint64)void ABI method
   *
   * Allows creator to initialize the app
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap(pay,asset,asset,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap(pay,asset,asset,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.seed, args.stakeAsset, args.rewardAsset, args.start, args.finish],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addRewards(axfer,uint64)uint64 ABI method
   *
   * Allows contract to be funded with more rewards
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addRewards(args: MethodArgs<'addRewards(axfer,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addRewards(axfer,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.axfer, args.rewardRate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addStake(axfer)uint64 ABI method
   *
   * Allows users to stake tokens
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addStake(args: MethodArgs<'addStake(axfer)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addStake(axfer)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.axfer],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the removeStake(asset,uint64)uint64 ABI method
   *
   * Allows users to remove staked tokens
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removeStake(args: MethodArgs<'removeStake(asset,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'removeStake(asset,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claimRewards(asset)void ABI method
   *
   * Allows users to remove rewards that have accrued
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimRewards(args: MethodArgs<'claimRewards(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claimRewards(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AssetStaker smart contract
 */
export class AssetStakerClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AssetStakerClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AssetStaker['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AssetStaker smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AssetStakerDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AssetStakerCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AssetStaker smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(AssetStakerCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the AssetStaker smart contract using the optInToApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The optIn result
       */
      async optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'optInToApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.optIn(AssetStakerCallFactory.optIn.optInToApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AssetStaker smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap(pay,asset,asset,uint64,uint64)void ABI method.
   *
   * Allows creator to initialize the app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: void
   */
  public bootstrap(args: MethodArgs<'bootstrap(pay,asset,asset,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AssetStakerCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the addRewards(axfer,uint64)uint64 ABI method.
   *
   * Allows contract to be funded with more rewards
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: uint64 - the total rewards (in rewardToken) remaining in the app
   */
  public addRewards(args: MethodArgs<'addRewards(axfer,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AssetStakerCallFactory.addRewards(args, params))
  }

  /**
   * Calls the addStake(axfer)uint64 ABI method.
   *
   * Allows users to stake tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: uint64 - the total number of tokens user has staked
   */
  public addStake(args: MethodArgs<'addStake(axfer)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AssetStakerCallFactory.addStake(args, params))
  }

  /**
   * Calls the removeStake(asset,uint64)uint64 ABI method.
   *
   * Allows users to remove staked tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: uint64 - the total number of tokens user has staked (may be zero if all are removed)
   */
  public removeStake(args: MethodArgs<'removeStake(asset,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AssetStakerCallFactory.removeStake(args, params))
  }

  /**
   * Calls the claimRewards(asset)void ABI method.
   *
   * Allows users to remove rewards that have accrued
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: number of rewards currently pending for user
   */
  public claimRewards(args: MethodArgs<'claimRewards(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AssetStakerCallFactory.claimRewards(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<AssetStaker['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get sa() {
        return AssetStakerClient.getIntegerState(state, 'sa')
      },
      get ra() {
        return AssetStakerClient.getIntegerState(state, 'ra')
      },
      get rr() {
        return AssetStakerClient.getIntegerState(state, 'rr')
      },
      get tr() {
        return AssetStakerClient.getIntegerState(state, 'tr')
      },
      get ts() {
        return AssetStakerClient.getIntegerState(state, 'ts')
      },
      get st() {
        return AssetStakerClient.getIntegerState(state, 'st')
      },
      get fi() {
        return AssetStakerClient.getIntegerState(state, 'fi')
      },
      get lu() {
        return AssetStakerClient.getIntegerState(state, 'lu')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<AssetStaker['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get us() {
        return AssetStakerClient.getIntegerState(state, 'us')
      },
      get up() {
        return AssetStakerClient.getIntegerState(state, 'up')
      },
      get ul() {
        return AssetStakerClient.getIntegerState(state, 'ul')
      },
    }
  }

  public compose(): AssetStakerComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap(pay,asset,asset,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addRewards(args: MethodArgs<'addRewards(axfer,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addStake(args: MethodArgs<'addStake(axfer)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      removeStake(args: MethodArgs<'removeStake(asset,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.removeStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimRewards(args: MethodArgs<'claimRewards(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        const $this = this
        return {
          optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientCallCoreParams) {
            promiseChain = promiseChain.then(() => client.optIn.optInToApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AssetStakerComposer
  }
}
export type AssetStakerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(pay,asset,asset,uint64,uint64)void ABI method.
   *
   * Allows creator to initialize the app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap(pay,asset,asset,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AssetStakerComposer<[...TReturns, MethodReturn<'bootstrap(pay,asset,asset,uint64,uint64)void'>]>

  /**
   * Calls the addRewards(axfer,uint64)uint64 ABI method.
   *
   * Allows contract to be funded with more rewards
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addRewards(args: MethodArgs<'addRewards(axfer,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AssetStakerComposer<[...TReturns, MethodReturn<'addRewards(axfer,uint64)uint64'>]>

  /**
   * Calls the addStake(axfer)uint64 ABI method.
   *
   * Allows users to stake tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addStake(args: MethodArgs<'addStake(axfer)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AssetStakerComposer<[...TReturns, MethodReturn<'addStake(axfer)uint64'>]>

  /**
   * Calls the removeStake(asset,uint64)uint64 ABI method.
   *
   * Allows users to remove staked tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeStake(args: MethodArgs<'removeStake(asset,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AssetStakerComposer<[...TReturns, MethodReturn<'removeStake(asset,uint64)uint64'>]>

  /**
   * Calls the claimRewards(asset)void ABI method.
   *
   * Allows users to remove rewards that have accrued
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimRewards(args: MethodArgs<'claimRewards(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AssetStakerComposer<[...TReturns, MethodReturn<'claimRewards(asset)void'>]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the AssetStaker smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientCallCoreParams): AssetStakerComposer<[...TReturns, MethodReturn<'optInToApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the AssetStaker smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AssetStakerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AssetStakerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<AssetStakerComposerResults<TReturns>>
}
export type AssetStakerComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
