/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "optInToApplication()void": {
      "call_config": {
        "opt_in": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "bootstrap(pay,asset,asset,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addRewards(axfer,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addStake(axfer)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeStake(asset,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "userStake": {
          "type": "uint64",
          "key": "us"
        },
        "userPendingRewards": {
          "type": "uint64",
          "key": "up"
        },
        "userLastUpdated": {
          "type": "uint64",
          "key": "ul"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "stakeAsset": {
          "type": "uint64",
          "key": "sa"
        },
        "rewardAsset": {
          "type": "uint64",
          "key": "ra"
        },
        "rewardRate": {
          "type": "uint64",
          "key": "rr"
        },
        "totalRewards": {
          "type": "uint64",
          "key": "tr"
        },
        "totalStaked": {
          "type": "uint64",
          "key": "ts"
        },
        "startTimestamp": {
          "type": "uint64",
          "key": "st"
        },
        "finishTimestamp": {
          "type": "uint64",
          "key": "fi"
        },
        "lastUpdated": {
          "type": "uint64",
          "key": "lu"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 8
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 3
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDkKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuNjMuMAovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlcHNlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIk5PVF9JTVBMTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECmludCAwCj4KaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoIGNyZWF0ZV9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgY2FsbF9Ob09wIGNhbGxfT3B0SW4KCk5PVF9JTVBMRU1FTlRFRDoKCWVycgoKb3B0SW50b0Fzc2V0OgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjQwCgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgIGFzc2V0QW1vdW50OiAwLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6NDEKCS8vIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6NDIKCS8vIHhmZXJBc3NldDogYXNzZXQKCWZyYW1lX2RpZyAtMSAvLyBhc3NldDogYXNzZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjQzCgkvLyBhc3NldEFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCmNhbGN1bGF0ZVJld2FyZHM6Cglwcm90byA2IDAKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6NTAKCS8vIGFzc2VydChnbG9iYWxzLmxhdGVzdFRpbWVzdGFtcCA+PSB0aGlzLnN0YXJ0VGltZXN0YW1wLnZhbHVlKQoJZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAoJYnl0ZSAweDczNzQgLy8gInN0IgoJYXBwX2dsb2JhbF9nZXQKCT49Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6NTIKCS8vIGFzc2VydCh0aGlzLnVzZXJMYXN0VXBkYXRlZChhY2NvdW50KS52YWx1ZSA8PSB0aGlzLmZpbmlzaFRpbWVzdGFtcC52YWx1ZSkKCWZyYW1lX2RpZyAtMSAvLyBhY2NvdW50OiBhY2NvdW50CglieXRlIDB4NzU2YyAvLyAidWwiCglhcHBfbG9jYWxfZ2V0CglieXRlIDB4NjY2OSAvLyAiZmkiCglhcHBfZ2xvYmFsX2dldAoJPD0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9hc3NldC1zdGFrZXIuYWxnby50czo1NAoJLy8gZW5kID0KCS8vICAgICAgIGdsb2JhbHMubGF0ZXN0VGltZXN0YW1wID4gdGhpcy5maW5pc2hUaW1lc3RhbXAudmFsdWUgPyB0aGlzLmZpbmlzaFRpbWVzdGFtcC52YWx1ZSA6IGdsb2JhbHMubGF0ZXN0VGltZXN0YW1wCglnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCglieXRlIDB4NjY2OSAvLyAiZmkiCglhcHBfZ2xvYmFsX2dldAoJPgoJYnogdGVybmFyeTFfZmFsc2UKCWJ5dGUgMHg2NjY5IC8vICJmaSIKCWFwcF9nbG9iYWxfZ2V0CgliIHRlcm5hcnkxX2VuZAoKdGVybmFyeTFfZmFsc2U6CglnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCgp0ZXJuYXJ5MV9lbmQ6CglmcmFtZV9idXJ5IC0yIC8vIGVuZDogdWludDY0CgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjU3CgkvLyBzdGFydCA9CgkvLyAgICAgICB0aGlzLnVzZXJMYXN0VXBkYXRlZChhY2NvdW50KS52YWx1ZSA8IHRoaXMuc3RhcnRUaW1lc3RhbXAudmFsdWUKCS8vICAgICAgICAgPyB0aGlzLnN0YXJ0VGltZXN0YW1wLnZhbHVlCgkvLyAgICAgICAgIDogdGhpcy51c2VyTGFzdFVwZGF0ZWQoYWNjb3VudCkudmFsdWUKCWZyYW1lX2RpZyAtMSAvLyBhY2NvdW50OiBhY2NvdW50CglieXRlIDB4NzU2YyAvLyAidWwiCglhcHBfbG9jYWxfZ2V0CglieXRlIDB4NzM3NCAvLyAic3QiCglhcHBfZ2xvYmFsX2dldAoJPAoJYnogdGVybmFyeTNfZmFsc2UKCWJ5dGUgMHg3Mzc0IC8vICJzdCIKCWFwcF9nbG9iYWxfZ2V0CgliIHRlcm5hcnkzX2VuZAoKdGVybmFyeTNfZmFsc2U6CglmcmFtZV9kaWcgLTEgLy8gYWNjb3VudDogYWNjb3VudAoJYnl0ZSAweDc1NmMgLy8gInVsIgoJYXBwX2xvY2FsX2dldAoKdGVybmFyeTNfZW5kOgoJZnJhbWVfYnVyeSAtMyAvLyBzdGFydDogdWludDY0CgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjYzCgkvLyBkdXJhdGlvbiA9IGVuZCAtIHN0YXJ0CglmcmFtZV9kaWcgLTIgLy8gZW5kOiB1aW50NjQKCWZyYW1lX2RpZyAtMyAvLyBzdGFydDogdWludDY0CgktCglmcmFtZV9idXJ5IC00IC8vIGR1cmF0aW9uOiB1aW50NjQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6NjQKCS8vIGFtb3VudFN0YWtlZCA9IHRoaXMudXNlclN0YWtlKGFjY291bnQpLnZhbHVlCglmcmFtZV9kaWcgLTEgLy8gYWNjb3VudDogYWNjb3VudAoJYnl0ZSAweDc1NzMgLy8gInVzIgoJYXBwX2xvY2FsX2dldAoJZnJhbWVfYnVyeSAtNSAvLyBhbW91bnRTdGFrZWQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9hc3NldC1zdGFrZXIuYWxnby50czo2NgoJLy8gcmV3YXJkc0Vhcm5lZCA9ICgoKGFtb3VudFN0YWtlZCAqIGR1cmF0aW9uKSAvIDMxNTU3NjAwKSAqIHRoaXMucmV3YXJkUmF0ZS52YWx1ZSkgLyAxMDAwMAoJZnJhbWVfZGlnIC01IC8vIGFtb3VudFN0YWtlZDogdWludDY0CglmcmFtZV9kaWcgLTQgLy8gZHVyYXRpb246IHVpbnQ2NAoJKgoJaW50IDMxNTU3NjAwCgkvCglieXRlIDB4NzI3MiAvLyAicnIiCglhcHBfZ2xvYmFsX2dldAoJKgoJaW50IDEwMDAwCgkvCglmcmFtZV9idXJ5IC02IC8vIHJld2FyZHNFYXJuZWQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9hc3NldC1zdGFrZXIuYWxnby50czo2OQoJLy8gdGhpcy51c2VyUGVuZGluZ1Jld2FyZHMoYWNjb3VudCkudmFsdWUgPSB0aGlzLnVzZXJQZW5kaW5nUmV3YXJkcyhhY2NvdW50KS52YWx1ZSArIHJld2FyZHNFYXJuZWQKCWZyYW1lX2RpZyAtMSAvLyBhY2NvdW50OiBhY2NvdW50CglieXRlIDB4NzU3MCAvLyAidXAiCglmcmFtZV9kaWcgLTEgLy8gYWNjb3VudDogYWNjb3VudAoJYnl0ZSAweDc1NzAgLy8gInVwIgoJYXBwX2xvY2FsX2dldAoJZnJhbWVfZGlnIC02IC8vIHJld2FyZHNFYXJuZWQ6IHVpbnQ2NAoJKwoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9hc3NldC1zdGFrZXIuYWxnby50czo3MQoJLy8gdGhpcy50b3RhbFJld2FyZHMudmFsdWUgPSB0aGlzLnRvdGFsUmV3YXJkcy52YWx1ZSAtIHJld2FyZHNFYXJuZWQKCWJ5dGUgMHg3NDcyIC8vICJ0ciIKCWJ5dGUgMHg3NDcyIC8vICJ0ciIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTYgLy8gcmV3YXJkc0Vhcm5lZDogdWludDY0CgktCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9hc3NldC1zdGFrZXIuYWxnby50czo3NAoJLy8gdGhpcy51c2VyTGFzdFVwZGF0ZWQoYWNjb3VudCkudmFsdWUgPSBnbG9iYWxzLmxhdGVzdFRpbWVzdGFtcAoJZnJhbWVfZGlnIC0xIC8vIGFjY291bnQ6IGFjY291bnQKCWJ5dGUgMHg3NTZjIC8vICJ1bCIKCWdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKCWFwcF9sb2NhbF9wdXQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6NzYKCS8vIHRoaXMubGFzdFVwZGF0ZWQudmFsdWUgPSBnbG9iYWxzLmxhdGVzdFRpbWVzdGFtcAoJYnl0ZSAweDZjNzUgLy8gImx1IgoJZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gb3B0SW5Ub0FwcGxpY2F0aW9uKCl2b2lkCi8vCi8vIC8vIG5lZWQgdGhpcyBtZXRob2Qgc28gdXNlciBjYW4gb3B0LWluIHRvIGNyZWF0ZSBsb2NhbCBzdGF0ZQphYmlfcm91dGVfb3B0SW5Ub0FwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSBvcHRJblRvQXBwbGljYXRpb24oKXZvaWQKCWNhbGxzdWIgb3B0SW5Ub0FwcGxpY2F0aW9uCglpbnQgMQoJcmV0dXJuCgpvcHRJblRvQXBwbGljYXRpb246Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6ODEKCS8vIHRoaXMudXNlckxhc3RVcGRhdGVkKHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSAwCgl0eG4gU2VuZGVyCglieXRlIDB4NzU2YyAvLyAidWwiCglpbnQgMAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9hc3NldC1zdGFrZXIuYWxnby50czo4MgoJLy8gdGhpcy51c2VyUGVuZGluZ1Jld2FyZHModGhpcy50eG4uc2VuZGVyKS52YWx1ZSA9IDAKCXR4biBTZW5kZXIKCWJ5dGUgMHg3NTcwIC8vICJ1cCIKCWludCAwCglhcHBfbG9jYWxfcHV0CgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjgzCgkvLyB0aGlzLnVzZXJTdGFrZSh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0gMAoJdHhuIFNlbmRlcgoJYnl0ZSAweDc1NzMgLy8gInVzIgoJaW50IDAKCWFwcF9sb2NhbF9wdXQKCXJldHN1YgoKLy8gY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgoJaW50IDEKCXJldHVybgoKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6ODcKCS8vIHRoaXMuc3Rha2VBc3NldC52YWx1ZSA9IEFzc2V0Lnplcm9JbmRleAoJYnl0ZSAweDczNjEgLy8gInNhIgoJaW50IDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjg4CgkvLyB0aGlzLnJld2FyZEFzc2V0LnZhbHVlID0gQXNzZXQuemVyb0luZGV4CglieXRlIDB4NzI2MSAvLyAicmEiCglpbnQgMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6ODkKCS8vIHRoaXMudG90YWxSZXdhcmRzLnZhbHVlID0gMAoJYnl0ZSAweDc0NzIgLy8gInRyIgoJaW50IDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjkwCgkvLyB0aGlzLnJld2FyZFJhdGUudmFsdWUgPSAwCglieXRlIDB4NzI3MiAvLyAicnIiCglpbnQgMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6OTEKCS8vIHRoaXMudG90YWxTdGFrZWQudmFsdWUgPSAwCglieXRlIDB4NzQ3MyAvLyAidHMiCglpbnQgMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6OTIKCS8vIHRoaXMuc3RhcnRUaW1lc3RhbXAudmFsdWUgPSAwCglieXRlIDB4NzM3NCAvLyAic3QiCglpbnQgMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6OTMKCS8vIHRoaXMuZmluaXNoVGltZXN0YW1wLnZhbHVlID0gMAoJYnl0ZSAweDY2NjkgLy8gImZpIgoJaW50IDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjk0CgkvLyB0aGlzLmxhc3RVcGRhdGVkLnZhbHVlID0gMAoJYnl0ZSAweDZjNzUgLy8gImx1IgoJaW50IDAKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGJvb3RzdHJhcCh1aW50NjQsdWludDY0LGFzc2V0LGFzc2V0LHBheSl2b2lkCi8vCi8vIEFsbG93cyBjcmVhdG9yIHRvIGluaXRpYWxpemUgdGhlIGFwcAovLwovLyBAcGFyYW0gc2VlZCBUaGUgYHBheWAgdHhuIHRvIGZ1bmQgdGhlIGFwcCAoMC4yIG1pbikKLy8gQHBhcmFtIHN0YWtlQXNzZXQgVGhlIGFzc2V0IHRvIGJlIHN0YWtlZAovLyBAcGFyYW0gcmV3YXJkQXNzZXQgVGhlIGFzc2V0IHRvIHBheSByZXdhcmRzCi8vIEBwYXJhbSBzdGFydCBUaGUgc3RhcnQgdGltZSBpbiBVTklYIHRpbWUKLy8gQHBhcmFtIGZpbmlzaCBUaGUgZW5kIHRpbWUgaW4gVU5JWCB0aW1lCi8vCi8vIEByZXR1cm5zIHZvaWQKYWJpX3JvdXRlX2Jvb3RzdHJhcDoKCWJ5dGUgMHg7IGR1cCAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCgkvLyBmaW5pc2g6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAoJYnRvaQoKCS8vIHN0YXJ0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCgkvLyByZXdhcmRBc3NldDogYXNzZXQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCXR4bmFzIEFzc2V0cwoKCS8vIHN0YWtlQXNzZXQ6IGFzc2V0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBc3NldHMKCgkvLyBzZWVkOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IHBheQoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgYm9vdHN0cmFwKHVpbnQ2NCx1aW50NjQsYXNzZXQsYXNzZXQscGF5KXZvaWQKCWNhbGxzdWIgYm9vdHN0cmFwCglpbnQgMQoJcmV0dXJuCgpib290c3RyYXA6Cglwcm90byA3IDAKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MTEwCgkvLyBhc3NlcnQoc3RhcnQgPCBmaW5pc2gpCglmcmFtZV9kaWcgLTQgLy8gc3RhcnQ6IHVpbnQ2NAoJZnJhbWVfZGlnIC01IC8vIGZpbmlzaDogdWludDY0Cgk8Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MTEyCgkvLyBhc3NlcnQoZ2xvYmFscy5sYXRlc3RUaW1lc3RhbXAgPCBzdGFydCkKCWdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKCWZyYW1lX2RpZyAtNCAvLyBzdGFydDogdWludDY0Cgk8Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MTE0CgkvLyB2ZXJpZnlUeG4odGhpcy50eG4sIHsgc2VuZGVyOiBnbG9iYWxzLmNyZWF0b3JBZGRyZXNzIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCgl0eG4gU2VuZGVyCglnbG9iYWwgQ3JlYXRvckFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MTE2CgkvLyBhc3NlcnQodGhpcy5zdGFrZUFzc2V0LnZhbHVlID09PSBBc3NldC56ZXJvSW5kZXgpCglieXRlIDB4NzM2MSAvLyAic2EiCglhcHBfZ2xvYmFsX2dldAoJaW50IDAKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MTE4CgkvLyBhc3NlcnQodGhpcy5yZXdhcmRBc3NldC52YWx1ZSA9PT0gQXNzZXQuemVyb0luZGV4KQoJYnl0ZSAweDcyNjEgLy8gInJhIgoJYXBwX2dsb2JhbF9nZXQKCWludCAwCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjEyMAoJLy8gYXNzZXJ0KGdsb2JhbHMuZ3JvdXBTaXplID09PSAyKQoJZ2xvYmFsIEdyb3VwU2l6ZQoJaW50IDIKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MTIyCgkvLyBpc0Fzc2V0U2FtZSA9IHN0YWtlQXNzZXQgPT09IHJld2FyZEFzc2V0CglmcmFtZV9kaWcgLTIgLy8gc3Rha2VBc3NldDogYXNzZXQKCWZyYW1lX2RpZyAtMyAvLyByZXdhcmRBc3NldDogYXNzZXQKCT09CglmcmFtZV9idXJ5IC02IC8vIGlzQXNzZXRTYW1lOiBib29sCgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjEyMwoJLy8gcmVxdWlyZWRBbW91bnQgPSBpc0Fzc2V0U2FtZSA/IDJfMDAwIDogM18wMDAKCWZyYW1lX2RpZyAtNiAvLyBpc0Fzc2V0U2FtZTogYm9vbAoJYnogdGVybmFyeTVfZmFsc2UKCWludCAyXzAwMAoJYiB0ZXJuYXJ5NV9lbmQKCnRlcm5hcnk1X2ZhbHNlOgoJaW50IDNfMDAwCgp0ZXJuYXJ5NV9lbmQ6CglmcmFtZV9idXJ5IC03IC8vIHJlcXVpcmVkQW1vdW50OiB1aW50NjQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MTI2CgkvLyB2ZXJpZnlUeG4oc2VlZCwgeyByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywgYW1vdW50OiB7IGdyZWF0ZXJUaGFuRXF1YWxUbzogcmVxdWlyZWRBbW91bnQgfSB9KQoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gc2VlZDogcGF5CglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gc2VlZDogcGF5CglndHhucyBBbW91bnQKCWZyYW1lX2RpZyAtNyAvLyByZXF1aXJlZEFtb3VudDogdWludDY0Cgk+PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjEyOAoJLy8gdGhpcy5vcHRJbnRvQXNzZXQoc3Rha2VBc3NldCkKCWZyYW1lX2RpZyAtMiAvLyBzdGFrZUFzc2V0OiBhc3NldAoJY2FsbHN1YiBvcHRJbnRvQXNzZXQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MTI5CgkvLyB0aGlzLnN0YWtlQXNzZXQudmFsdWUgPSBzdGFrZUFzc2V0CglieXRlIDB4NzM2MSAvLyAic2EiCglmcmFtZV9kaWcgLTIgLy8gc3Rha2VBc3NldDogYXNzZXQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gaWYwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjEzMQoJLy8gIWlzQXNzZXRTYW1lCglmcmFtZV9kaWcgLTYgLy8gaXNBc3NldFNhbWU6IGJvb2wKCSEKCWJ6IGlmMF9lbHNlCgoJLy8gaWYwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9hc3NldC1zdGFrZXIuYWxnby50czoxMzIKCS8vIHRoaXMub3B0SW50b0Fzc2V0KHJld2FyZEFzc2V0KQoJZnJhbWVfZGlnIC0zIC8vIHJld2FyZEFzc2V0OiBhc3NldAoJY2FsbHN1YiBvcHRJbnRvQXNzZXQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MTMzCgkvLyB0aGlzLnJld2FyZEFzc2V0LnZhbHVlID0gcmV3YXJkQXNzZXQKCWJ5dGUgMHg3MjYxIC8vICJyYSIKCWZyYW1lX2RpZyAtMyAvLyByZXdhcmRBc3NldDogYXNzZXQKCWFwcF9nbG9iYWxfcHV0CgliIGlmMF9lbmQKCmlmMF9lbHNlOgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjEzNQoJLy8gdGhpcy5yZXdhcmRBc3NldC52YWx1ZSA9IHN0YWtlQXNzZXQKCWJ5dGUgMHg3MjYxIC8vICJyYSIKCWZyYW1lX2RpZyAtMiAvLyBzdGFrZUFzc2V0OiBhc3NldAoJYXBwX2dsb2JhbF9wdXQKCmlmMF9lbmQ6CgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MTM4CgkvLyB0aGlzLnN0YXJ0VGltZXN0YW1wLnZhbHVlID0gc3RhcnQKCWJ5dGUgMHg3Mzc0IC8vICJzdCIKCWZyYW1lX2RpZyAtNCAvLyBzdGFydDogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9hc3NldC1zdGFrZXIuYWxnby50czoxMzkKCS8vIHRoaXMuZmluaXNoVGltZXN0YW1wLnZhbHVlID0gZmluaXNoCglieXRlIDB4NjY2OSAvLyAiZmkiCglmcmFtZV9kaWcgLTUgLy8gZmluaXNoOiB1aW50NjQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGFkZFJld2FyZHModWludDY0LGF4ZmVyKXVpbnQ2NAovLwovLyBBbGxvd3MgY29udHJhY3QgdG8gYmUgZnVuZGVkIHdpdGggbW9yZSByZXdhcmRzCi8vCi8vIEBwYXJhbSBheGZlciBUaGUgYGF4ZmVyYCBmdW5kaW5nIHRoZSBhcHAgd2l0aCByZXdhcmRBc3NldAovLyBAcGFyYW0gcmV3YXJkUmF0ZSB0aGUgdWludDY0IHZhbHVlIG9mIGhvdyBtYW55IHJld2FyZHMgcGVyIHNlY29uZAovLwovLyBAcmV0dXJucyB1aW50NjQgLSB0aGUgdG90YWwgcmV3YXJkcyAoaW4gcmV3YXJkVG9rZW4pIHJlbWFpbmluZyBpbiB0aGUgYXBwCmFiaV9yb3V0ZV9hZGRSZXdhcmRzOgoJYnl0ZSAweCAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCgkvLyByZXdhcmRSYXRlOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBheGZlcjogYXhmZXIKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IGF4ZmVyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhZGRSZXdhcmRzKHVpbnQ2NCxheGZlcil1aW50NjQKCWNhbGxzdWIgYWRkUmV3YXJkcwoJaW50IDEKCXJldHVybgoKYWRkUmV3YXJkczoKCXByb3RvIDMgMAoKCS8vIGNvbnRyYWN0cy9hc3NldC1zdGFrZXIuYWxnby50czoxNTIKCS8vIHZlcmlmeVR4bih0aGlzLnR4biwgeyBzZW5kZXI6IGdsb2JhbHMuY3JlYXRvckFkZHJlc3MgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCXR4biBTZW5kZXIKCWdsb2JhbCBDcmVhdG9yQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9hc3NldC1zdGFrZXIuYWxnby50czoxNTUKCS8vIHZlcmlmeVR4bihheGZlciwgewoJLy8gICAgICAgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICB4ZmVyQXNzZXQ6IHRoaXMucmV3YXJkQXNzZXQudmFsdWUsCgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IHsgZ3JlYXRlclRoYW46IDAgfSwKCS8vICAgICB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIGF4ZmVyOiBheGZlcgoJZ3R4bnMgU2VuZGVyCgl0eG4gU2VuZGVyCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHhmZXJBc3NldAoJZnJhbWVfZGlnIC0xIC8vIGF4ZmVyOiBheGZlcgoJZ3R4bnMgWGZlckFzc2V0CglieXRlIDB4NzI2MSAvLyAicmEiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldFJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gYXhmZXI6IGF4ZmVyCglndHhucyBBc3NldFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldEFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIGF4ZmVyOiBheGZlcgoJZ3R4bnMgQXNzZXRBbW91bnQKCWludCAwCgk+Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MTYyCgkvLyBuZXdUb3RhbFJld2FyZHMgPSB0aGlzLnRvdGFsUmV3YXJkcy52YWx1ZSArIGF4ZmVyLmFzc2V0QW1vdW50CglieXRlIDB4NzQ3MiAvLyAidHIiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIGF4ZmVyOiBheGZlcgoJZ3R4bnMgQXNzZXRBbW91bnQKCSsKCWZyYW1lX2J1cnkgLTMgLy8gbmV3VG90YWxSZXdhcmRzOiB1aW50NjQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MTY0CgkvLyB0aGlzLnRvdGFsUmV3YXJkcy52YWx1ZSA9IG5ld1RvdGFsUmV3YXJkcwoJYnl0ZSAweDc0NzIgLy8gInRyIgoJZnJhbWVfZGlnIC0zIC8vIG5ld1RvdGFsUmV3YXJkczogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9hc3NldC1zdGFrZXIuYWxnby50czoxNjcKCS8vIGFzc2VydChyZXdhcmRSYXRlID4gMCkKCWZyYW1lX2RpZyAtMiAvLyByZXdhcmRSYXRlOiB1aW50NjQKCWludCAwCgk+Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MTcwCgkvLyB0aGlzLnJld2FyZFJhdGUudmFsdWUgPSByZXdhcmRSYXRlCglieXRlIDB4NzI3MiAvLyAicnIiCglmcmFtZV9kaWcgLTIgLy8gcmV3YXJkUmF0ZTogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9hc3NldC1zdGFrZXIuYWxnby50czoxNzIKCS8vIHJldHVybiBuZXdUb3RhbFJld2FyZHM7CglmcmFtZV9kaWcgLTMgLy8gbmV3VG90YWxSZXdhcmRzOiB1aW50NjQKCWl0b2IKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gYWRkU3Rha2UoYXhmZXIpdWludDY0Ci8vCi8vIEFsbG93cyB1c2VycyB0byBzdGFrZSB0b2tlbnMKLy8KLy8gQHBhcmFtIGF4ZmVyIFRoZSBgYXhmZXJgIGZ1bmRpbmcgdGhlIGFwcCB3aXRoIHN0YWtpbmdBc3NldAovLwovLyBAcmV0dXJucyB1aW50NjQgLSB0aGUgdG90YWwgbnVtYmVyIG9mIHRva2VucyB1c2VyIGhhcyBzdGFrZWQKYWJpX3JvdXRlX2FkZFN0YWtlOgoJYnl0ZSAweDsgZHVwIC8vIHB1c2ggZW1wdHkgYnl0ZXMgdG8gZmlsbCB0aGUgc3RhY2sgZnJhbWUgZm9yIHRoaXMgc3Vicm91dGluZSdzIGxvY2FsIHZhcmlhYmxlcwoKCS8vIGF4ZmVyOiBheGZlcgoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgYXhmZXIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGFkZFN0YWtlKGF4ZmVyKXVpbnQ2NAoJY2FsbHN1YiBhZGRTdGFrZQoJaW50IDEKCXJldHVybgoKYWRkU3Rha2U6Cglwcm90byAzIDAKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MTgzCgkvLyB2ZXJpZnlUeG4oYXhmZXIsIHsKCS8vICAgICAgIHNlbmRlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgeGZlckFzc2V0OiB0aGlzLnN0YWtlQXNzZXQudmFsdWUsCgkvLyAgICAgICBhc3NldEFtb3VudDogeyBncmVhdGVyVGhhbjogMCB9LAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIGF4ZmVyOiBheGZlcgoJZ3R4bnMgU2VuZGVyCgl0eG4gU2VuZGVyCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHhmZXJBc3NldAoJZnJhbWVfZGlnIC0xIC8vIGF4ZmVyOiBheGZlcgoJZ3R4bnMgWGZlckFzc2V0CglieXRlIDB4NzM2MSAvLyAic2EiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldEFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIGF4ZmVyOiBheGZlcgoJZ3R4bnMgQXNzZXRBbW91bnQKCWludCAwCgk+Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRSZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIGF4ZmVyOiBheGZlcgoJZ3R4bnMgQXNzZXRSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MTkxCgkvLyB0aGlzLmNhbGN1bGF0ZVJld2FyZHModGhpcy50eG4uc2VuZGVyKQoJYnl0ZSAweDsgZHVwbiA0IC8vIHB1c2ggZW1wdHkgYnl0ZXMgdG8gZmlsbCB0aGUgc3RhY2sgZnJhbWUgZm9yIHRoaXMgc3Vicm91dGluZSdzIGxvY2FsIHZhcmlhYmxlcwoJdHhuIFNlbmRlcgoJY2FsbHN1YiBjYWxjdWxhdGVSZXdhcmRzCgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjE5MwoJLy8gYW1vdW50ID0gYXhmZXIuYXNzZXRBbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBheGZlcjogYXhmZXIKCWd0eG5zIEFzc2V0QW1vdW50CglmcmFtZV9idXJ5IC0yIC8vIGFtb3VudDogdWludDY0CgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjE5NgoJLy8gdGhpcy50b3RhbFN0YWtlZC52YWx1ZSA9IHRoaXMudG90YWxTdGFrZWQudmFsdWUgKyBhbW91bnQKCWJ5dGUgMHg3NDczIC8vICJ0cyIKCWJ5dGUgMHg3NDczIC8vICJ0cyIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTIgLy8gYW1vdW50OiB1aW50NjQKCSsKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjE5OAoJLy8gbmV3VXNlclN0YWtlID0gdGhpcy51c2VyU3Rha2UodGhpcy50eG4uc2VuZGVyKS52YWx1ZSArIGFtb3VudAoJdHhuIFNlbmRlcgoJYnl0ZSAweDc1NzMgLy8gInVzIgoJYXBwX2xvY2FsX2dldAoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudDogdWludDY0CgkrCglmcmFtZV9idXJ5IC0zIC8vIG5ld1VzZXJTdGFrZTogdWludDY0CgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjE5OQoJLy8gdGhpcy51c2VyU3Rha2UodGhpcy50eG4uc2VuZGVyKS52YWx1ZSA9IG5ld1VzZXJTdGFrZQoJdHhuIFNlbmRlcgoJYnl0ZSAweDc1NzMgLy8gInVzIgoJZnJhbWVfZGlnIC0zIC8vIG5ld1VzZXJTdGFrZTogdWludDY0CglhcHBfbG9jYWxfcHV0CgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjIwMQoJLy8gcmV0dXJuIG5ld1VzZXJTdGFrZTsKCWZyYW1lX2RpZyAtMyAvLyBuZXdVc2VyU3Rha2U6IHVpbnQ2NAoJaXRvYgoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyByZW1vdmVTdGFrZSh1aW50NjQsYXNzZXQpdWludDY0Ci8vCi8vIEFsbG93cyB1c2VycyB0byByZW1vdmUgc3Rha2VkIHRva2VucwovLwovLyBAcGFyYW0gYXNzZXQgVGhlIHN0YWtlVG9rZW5Bc3NldCAobmVlZHMgaW1wbGljaXRseSBkZWNsYXJlZD8pCi8vCi8vIEByZXR1cm5zIHVpbnQ2NCAtIHRoZSB0b3RhbCBudW1iZXIgb2YgdG9rZW5zIHVzZXIgaGFzIHN0YWtlZCAobWF5IGJlIHplcm8gaWYgYWxsIGFyZSByZW1vdmVkKQphYmlfcm91dGVfcmVtb3ZlU3Rha2U6CglieXRlIDB4OyBkdXAgLy8gcHVzaCBlbXB0eSBieXRlcyB0byBmaWxsIHRoZSBzdGFjayBmcmFtZSBmb3IgdGhpcyBzdWJyb3V0aW5lJ3MgbG9jYWwgdmFyaWFibGVzCgoJLy8gYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBhc3NldDogYXNzZXQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCXR4bmFzIEFzc2V0cwoKCS8vIGV4ZWN1dGUgcmVtb3ZlU3Rha2UodWludDY0LGFzc2V0KXVpbnQ2NAoJY2FsbHN1YiByZW1vdmVTdGFrZQoJaW50IDEKCXJldHVybgoKcmVtb3ZlU3Rha2U6Cglwcm90byA0IDAKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MjEzCgkvLyBzdGFrZSA9IHRoaXMudXNlclN0YWtlKHRoaXMudHhuLnNlbmRlcikudmFsdWUKCXR4biBTZW5kZXIKCWJ5dGUgMHg3NTczIC8vICJ1cyIKCWFwcF9sb2NhbF9nZXQKCWZyYW1lX2J1cnkgLTMgLy8gc3Rha2U6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9hc3NldC1zdGFrZXIuYWxnby50czoyMTYKCS8vIGFzc2VydChhbW91bnQgPD0gc3Rha2UpCglmcmFtZV9kaWcgLTIgLy8gYW1vdW50OiB1aW50NjQKCWZyYW1lX2RpZyAtMyAvLyBzdGFrZTogdWludDY0Cgk8PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjIxOAoJLy8gYXNzZXJ0KGFzc2V0ID09PSB0aGlzLnN0YWtlQXNzZXQudmFsdWUpCglmcmFtZV9kaWcgLTEgLy8gYXNzZXQ6IGFzc2V0CglieXRlIDB4NzM2MSAvLyAic2EiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9hc3NldC1zdGFrZXIuYWxnby50czoyMjEKCS8vIHRoaXMuY2FsY3VsYXRlUmV3YXJkcyh0aGlzLnR4bi5zZW5kZXIpCglieXRlIDB4OyBkdXBuIDQgLy8gcHVzaCBlbXB0eSBieXRlcyB0byBmaWxsIHRoZSBzdGFjayBmcmFtZSBmb3IgdGhpcyBzdWJyb3V0aW5lJ3MgbG9jYWwgdmFyaWFibGVzCgl0eG4gU2VuZGVyCgljYWxsc3ViIGNhbGN1bGF0ZVJld2FyZHMKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MjI0CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IGFtb3VudCwKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL2Fzc2V0LXN0YWtlci5hbGdvLnRzOjIyNQoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiBhc3NldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MjI2CgkvLyBhc3NldEFtb3VudDogYW1vdW50CglmcmFtZV9kaWcgLTIgLy8gYW1vdW50OiB1aW50NjQKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MjI3CgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MjMxCgkvLyB0aGlzLnRvdGFsU3Rha2VkLnZhbHVlID0gdGhpcy50b3RhbFN0YWtlZC52YWx1ZSAtIGFtb3VudAoJYnl0ZSAweDc0NzMgLy8gInRzIgoJYnl0ZSAweDc0NzMgLy8gInRzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnQ6IHVpbnQ2NAoJLQoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MjMzCgkvLyBuZXdVc2VyU3Rha2UgPSB0aGlzLnVzZXJTdGFrZSh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlIC0gYW1vdW50Cgl0eG4gU2VuZGVyCglieXRlIDB4NzU3MyAvLyAidXMiCglhcHBfbG9jYWxfZ2V0CglmcmFtZV9kaWcgLTIgLy8gYW1vdW50OiB1aW50NjQKCS0KCWZyYW1lX2J1cnkgLTQgLy8gbmV3VXNlclN0YWtlOiB1aW50NjQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MjM0CgkvLyB0aGlzLnVzZXJTdGFrZSh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0gbmV3VXNlclN0YWtlCgl0eG4gU2VuZGVyCglieXRlIDB4NzU3MyAvLyAidXMiCglmcmFtZV9kaWcgLTQgLy8gbmV3VXNlclN0YWtlOiB1aW50NjQKCWFwcF9sb2NhbF9wdXQKCgkvLyBjb250cmFjdHMvYXNzZXQtc3Rha2VyLmFsZ28udHM6MjM2CgkvLyByZXR1cm4gbmV3VXNlclN0YWtlOwoJZnJhbWVfZGlnIC00IC8vIG5ld1VzZXJTdGFrZTogdWludDY0CglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmNyZWF0ZV9Ob09wOgoJbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoJZXJyCgpjYWxsX05vT3A6CgltZXRob2QgImJvb3RzdHJhcChwYXksYXNzZXQsYXNzZXQsdWludDY0LHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJhZGRSZXdhcmRzKGF4ZmVyLHVpbnQ2NCl1aW50NjQiCgltZXRob2QgImFkZFN0YWtlKGF4ZmVyKXVpbnQ2NCIKCW1ldGhvZCAicmVtb3ZlU3Rha2UoYXNzZXQsdWludDY0KXVpbnQ2NCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9ib290c3RyYXAgYWJpX3JvdXRlX2FkZFJld2FyZHMgYWJpX3JvdXRlX2FkZFN0YWtlIGFiaV9yb3V0ZV9yZW1vdmVTdGFrZQoJZXJyCgpjYWxsX09wdEluOgoJbWV0aG9kICJvcHRJblRvQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCBhYmlfcm91dGVfb3B0SW5Ub0FwcGxpY2F0aW9uCgllcnI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "AssetStaker",
    "desc": "",
    "methods": [
      {
        "name": "optInToApplication",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "bootstrap",
        "args": [
          {
            "name": "seed",
            "type": "pay",
            "desc": "The`pay`txn to fund the app (0.2 min)"
          },
          {
            "name": "stakeAsset",
            "type": "asset",
            "desc": "The asset to be staked"
          },
          {
            "name": "rewardAsset",
            "type": "asset",
            "desc": "The asset to pay rewards"
          },
          {
            "name": "start",
            "type": "uint64",
            "desc": "The start time in UNIX time"
          },
          {
            "name": "finish",
            "type": "uint64",
            "desc": "The end time in UNIX time"
          }
        ],
        "desc": "Allows creator to initialize the app",
        "returns": {
          "type": "void",
          "desc": "void"
        }
      },
      {
        "name": "addRewards",
        "args": [
          {
            "name": "axfer",
            "type": "axfer",
            "desc": "The`axfer`funding the app with rewardAsset"
          },
          {
            "name": "rewardRate",
            "type": "uint64",
            "desc": "the uint64 value of how many rewards per second"
          }
        ],
        "desc": "Allows contract to be funded with more rewards",
        "returns": {
          "type": "uint64",
          "desc": "uint64 - the total rewards (in rewardToken) remaining in the app"
        }
      },
      {
        "name": "addStake",
        "args": [
          {
            "name": "axfer",
            "type": "axfer",
            "desc": "The`axfer`funding the app with stakingAsset"
          }
        ],
        "desc": "Allows users to stake tokens",
        "returns": {
          "type": "uint64",
          "desc": "uint64 - the total number of tokens user has staked"
        }
      },
      {
        "name": "removeStake",
        "args": [
          {
            "name": "asset",
            "type": "asset",
            "desc": "The stakeTokenAsset (needs implicitly declared?)"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "Allows users to remove staked tokens",
        "returns": {
          "type": "uint64",
          "desc": "uint64 - the total number of tokens user has staked (may be zero if all are removed)"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the AssetStaker smart contract.
 */
export type AssetStaker = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'bootstrap(pay,asset,asset,uint64,uint64)void' | 'bootstrap', {
      argsObj: {
        /**
         * The`pay`txn to fund the app (0.2 min)
         */
        seed: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The asset to be staked
         */
        stakeAsset: number | bigint
        /**
         * The asset to pay rewards
         */
        rewardAsset: number | bigint
        /**
         * The start time in UNIX time
         */
        start: bigint | number
        /**
         * The end time in UNIX time
         */
        finish: bigint | number
      }
      argsTuple: [seed: TransactionToSign | Transaction | Promise<SendTransactionResult>, stakeAsset: number | bigint, rewardAsset: number | bigint, start: bigint | number, finish: bigint | number]
      /**
       * void
       */
      returns: void
    }>
    & Record<'addRewards(axfer,uint64)uint64' | 'addRewards', {
      argsObj: {
        /**
         * The`axfer`funding the app with rewardAsset
         */
        axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * the uint64 value of how many rewards per second
         */
        rewardRate: bigint | number
      }
      argsTuple: [axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>, rewardRate: bigint | number]
      /**
       * uint64 - the total rewards (in rewardToken) remaining in the app
       */
      returns: bigint
    }>
    & Record<'addStake(axfer)uint64' | 'addStake', {
      argsObj: {
        /**
         * The`axfer`funding the app with stakingAsset
         */
        axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      /**
       * uint64 - the total number of tokens user has staked
       */
      returns: bigint
    }>
    & Record<'removeStake(asset,uint64)uint64' | 'removeStake', {
      argsObj: {
        /**
         * The stakeTokenAsset (needs implicitly declared?)
         */
        asset: number | bigint
        amount: bigint | number
      }
      argsTuple: [asset: number | bigint, amount: bigint | number]
      /**
       * uint64 - the total number of tokens user has staked (may be zero if all are removed)
       */
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'sa'?: IntegerState
      'ra'?: IntegerState
      'rr'?: IntegerState
      'tr'?: IntegerState
      'ts'?: IntegerState
      'st'?: IntegerState
      'fi'?: IntegerState
      'lu'?: IntegerState
    }
    local: {
      'us'?: IntegerState
      'up'?: IntegerState
      'ul'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AssetStakerSig = keyof AssetStaker['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AssetStakerSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the AssetStaker smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AssetStakerSig> = AssetStaker['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AssetStaker smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AssetStakerSig> = AssetStaker['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AssetStakerCreateCalls = (typeof AssetStakerCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AssetStakerCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type AssetStakerDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AssetStakerCreateCalls) => AssetStakerCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AssetStakerCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AssetStaker smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the AssetStaker smart contract using the optInToApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'optInToApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(pay,asset,asset,uint64,uint64)void ABI method
   *
   * Allows creator to initialize the app
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap(pay,asset,asset,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap(pay,asset,asset,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.seed, args.stakeAsset, args.rewardAsset, args.start, args.finish],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addRewards(axfer,uint64)uint64 ABI method
   *
   * Allows contract to be funded with more rewards
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addRewards(args: MethodArgs<'addRewards(axfer,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addRewards(axfer,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.axfer, args.rewardRate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addStake(axfer)uint64 ABI method
   *
   * Allows users to stake tokens
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addStake(args: MethodArgs<'addStake(axfer)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addStake(axfer)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.axfer],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the removeStake(asset,uint64)uint64 ABI method
   *
   * Allows users to remove staked tokens
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removeStake(args: MethodArgs<'removeStake(asset,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'removeStake(asset,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset, args.amount],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AssetStaker smart contract
 */
export class AssetStakerClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AssetStakerClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AssetStaker['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AssetStaker smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AssetStakerDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AssetStakerCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AssetStaker smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(AssetStakerCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the AssetStaker smart contract using the optInToApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The optIn result
       */
      async optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'optInToApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.optIn(AssetStakerCallFactory.optIn.optInToApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AssetStaker smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap(pay,asset,asset,uint64,uint64)void ABI method.
   *
   * Allows creator to initialize the app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: void
   */
  public bootstrap(args: MethodArgs<'bootstrap(pay,asset,asset,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AssetStakerCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the addRewards(axfer,uint64)uint64 ABI method.
   *
   * Allows contract to be funded with more rewards
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: uint64 - the total rewards (in rewardToken) remaining in the app
   */
  public addRewards(args: MethodArgs<'addRewards(axfer,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AssetStakerCallFactory.addRewards(args, params))
  }

  /**
   * Calls the addStake(axfer)uint64 ABI method.
   *
   * Allows users to stake tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: uint64 - the total number of tokens user has staked
   */
  public addStake(args: MethodArgs<'addStake(axfer)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AssetStakerCallFactory.addStake(args, params))
  }

  /**
   * Calls the removeStake(asset,uint64)uint64 ABI method.
   *
   * Allows users to remove staked tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: uint64 - the total number of tokens user has staked (may be zero if all are removed)
   */
  public removeStake(args: MethodArgs<'removeStake(asset,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AssetStakerCallFactory.removeStake(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<AssetStaker['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get sa() {
        return AssetStakerClient.getIntegerState(state, 'sa')
      },
      get ra() {
        return AssetStakerClient.getIntegerState(state, 'ra')
      },
      get rr() {
        return AssetStakerClient.getIntegerState(state, 'rr')
      },
      get tr() {
        return AssetStakerClient.getIntegerState(state, 'tr')
      },
      get ts() {
        return AssetStakerClient.getIntegerState(state, 'ts')
      },
      get st() {
        return AssetStakerClient.getIntegerState(state, 'st')
      },
      get fi() {
        return AssetStakerClient.getIntegerState(state, 'fi')
      },
      get lu() {
        return AssetStakerClient.getIntegerState(state, 'lu')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<AssetStaker['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get us() {
        return AssetStakerClient.getIntegerState(state, 'us')
      },
      get up() {
        return AssetStakerClient.getIntegerState(state, 'up')
      },
      get ul() {
        return AssetStakerClient.getIntegerState(state, 'ul')
      },
    }
  }

  public compose(): AssetStakerComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap(pay,asset,asset,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addRewards(args: MethodArgs<'addRewards(axfer,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addStake(args: MethodArgs<'addStake(axfer)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      removeStake(args: MethodArgs<'removeStake(asset,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.removeStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        const $this = this
        return {
          optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientCallCoreParams) {
            promiseChain = promiseChain.then(() => client.optIn.optInToApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AssetStakerComposer
  }
}
export type AssetStakerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(pay,asset,asset,uint64,uint64)void ABI method.
   *
   * Allows creator to initialize the app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap(pay,asset,asset,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AssetStakerComposer<[...TReturns, MethodReturn<'bootstrap(pay,asset,asset,uint64,uint64)void'>]>

  /**
   * Calls the addRewards(axfer,uint64)uint64 ABI method.
   *
   * Allows contract to be funded with more rewards
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addRewards(args: MethodArgs<'addRewards(axfer,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AssetStakerComposer<[...TReturns, MethodReturn<'addRewards(axfer,uint64)uint64'>]>

  /**
   * Calls the addStake(axfer)uint64 ABI method.
   *
   * Allows users to stake tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addStake(args: MethodArgs<'addStake(axfer)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AssetStakerComposer<[...TReturns, MethodReturn<'addStake(axfer)uint64'>]>

  /**
   * Calls the removeStake(asset,uint64)uint64 ABI method.
   *
   * Allows users to remove staked tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeStake(args: MethodArgs<'removeStake(asset,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AssetStakerComposer<[...TReturns, MethodReturn<'removeStake(asset,uint64)uint64'>]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the AssetStaker smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientCallCoreParams): AssetStakerComposer<[...TReturns, MethodReturn<'optInToApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the AssetStaker smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AssetStakerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AssetStakerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<AssetStakerComposerResults<TReturns>>
}
export type AssetStakerComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
